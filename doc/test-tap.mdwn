# NAME

(test tap) - TAP emitting test framework for Scheme


# SYNOPSIS

(use-modules (test tap))

(*with-test-bundle* "test bundle name" **...**)

(*with-fs-test-bundle* **...**)

(*define-test* "test name" **...**)

(*define-tap-test* (template ...) (expression ...))

(*todo* **...**)

(*require* **...**)

(*pass-if-true* **EXP**)

(*pass-if-false* **EXP**)

(*pass-if-=* **EXP-a** **EXP-b**) ;; See TEST CASE MACROS for more.


# DESCRIPTION

*scm-test-tap* is a framework for writing test suites in Scheme, that emit
output compliant with the TAP protocol. It features a fairly rich API for
conveniently writing large, yet maintainable test suites.

The implementaton makes use of a number of non-standard features from
GNU Guile, ranging from extensions (like purely functional record
definitions) to the use of Guile internals (like access to backtraces in
the framework's handling of exceptions). Therefore porting the framework
to another Scheme implementation would be quite an undertaking. Nothing
of the sort is planned.


# TERMINOLOGY

*bundle*
:    A bundle is a collection of test cases and a plan associated with a
     hierarchy. Usually there is one bundle per file.

*hierarchy*
:    A hierarchy is a list of keywords that can be used categorise the
     tests, grouped within it..

*plan*
:    A plan determines the number of expected tests in a test bundle. In
     that case a plan is *deterministic*. It is also possible to define
     *non-deterministic* plans. See the section about plans for details.

*test case*
:    A test case is the specification of a single test, that includes an
     arbitrary title (a string that identifies the test case) and an
     expression that is evaluated in order to determine the outcome of
     that particular test case. This manual often uses *test* as a short
     form of “test case”.

*test script*
:    A test script is a file that uses the framework and contains one or
     more test bundles that will execute when the test script is run.

*test suite*
:    Test suites are a collection of test bundles, and therefore is a
     term that refers to the entire set of test cases in a project.


# ANATOMY OF A TEST SCRIPT

Test scripts contain bundles of actual tests. Such bundles are defined by
‘*with-test-bundle*’:

~~~~~~~{.scheme}
(with-test-bundle (hierarchy symbols here)
  ...)
~~~~~~~

A bundle has a planned number of tests, that it contains. This is articulated
by the ‘*plan*’ procedure (if there is no plan yet, the ‘*no-plan*’ procedure
can be used instead):

~~~~~~~{.scheme}
(with-test-bundle (hierarchy symbols here)
  (plan 12)   ; optionally: (no-plan)
  ...)
~~~~~~~

The actual tests are defined by calls to ‘*define-test*’, that connects a test
expression to a test title. The test expression is one variant of a
‘*pass-if-*\*’ macro, that takes care of all the book-keeping involved with the
processing of the test suite itself. Thus a very simple script could look like
the following snippet (the *(test tap)* module imports the framework's code):

~~~~~~~{.scheme}
(use-modules (test tap))

(with-test-bundle (math simple)
  (plan 1)
  (define-test "Basic integer addition works"
    (pass-if-= (+ 1 2) 3)))
~~~~~~~

This is the basic structure of test-scripts. The framework contains some helper
functionality to deal with common situations found in the real world. The
EXAMPLE section shows the use of some of those. The ‘*test/*’ subdirectory of
the project's source code directory contains a number of tests that make sure
the framework behaves as expected. Those scripts may be used for instructional
purposes as well.


# TEST DIRECTIVES

Test directives add additional information to tests. Currently, they can be
used to skip tests or mark them as `TODO`, which means that the test should be
run but be expected to likely fail, possibly because the part of the software
that is being tested is not finished yet.


## Skipping Tests

Some tests may be known to fail. Such tests can be skipped entirely by telling
the framework to do so. There are two ways to skip tests: *Static* skips will
skip the tests in question without question. *Dynamic* skips allow the user to
supply a predicate, that when evaluated determines whether the tests it covers
should be skipped or not.


### Static Skips

Using the ’*skip*’ keyword in a define-key instance will skip the
included test without evaluating it:

~~~~~~~{.scheme}
(define-test skip "Basic integer addition works"
  (pass-if-= (+ 1 2) 3)))
~~~~~~~

Similarly, entire bundles can be skipped. Included tests are never
visited and produce no output at all:

~~~~~~~{.scheme}
(with-test-bundle skip (math simple)
  (plan 1)
  (define-test "Basic integer addition works"
    ;; This would fail, but is never reached.
    (pass-if-= (+ 1 2) 4)))
~~~~~~~


### Dynamic Skips

Test bundles can also be skipped based on the evaluation of an
expression. This is done by using the ‘*require*’ form at the top level
of a bundle:

~~~~~~~{.scheme}
(with-test-bundle (test tap todo)
  (plan 1)
  (require (eq? 'this 'fails))
  (define-test "This test is never reached"
    (pass-if-= 1 1)))
~~~~~~~

This can be useful in case a set of tests can only be usefully be run,
in case the execution environment does not satisfy a giving requirement.

## Marking Tests as TODO

Marking a test case as `TODO`, means that the test is run as it would
usually, but the outcome of the test is *expected* to be failure. This
is useful, for instance, in case there is a corner case that is hard to
fix properly, where you want to keep the test in case because it
properly specifies the intended behaviour of the code, even though parts
of it are not quite right yet.

To mark an arbitrary number of tests as `TODO`, wrap the `define-test`
instances in the `(todo ...)` form:

~~~~~~~{.scheme}
(todo
 (define-test "Basic integer addition works"
   ;; Yes, this fails. We know. We'll get to it.
   (pass-if-= (+ 1 2) 4)))
~~~~~~~


# TEST CASE MACROS

The macros discussed in this section need to be used to perform the actual
testing with test-suites using this framework, since they take care of all the
required book-keeping as well as generating the desired TAP output.

The most generic of all these macros is ‘*pass-if-true*’ and all other macros
could indeed be implemented in terms of it. For example:

~~~~~~~{.scheme}
;; Here's an example we've already seen:
(define-test "Basic integer addition works"
  (pass-if-= (+ 1 2) 3))

;; And this is really the same test:
(define-test "Basic integer addition works"
  (pass-if-true (= (+ 1 2) 3)))
~~~~~~~

The additional macros are provided to increase brevity and clarity.


## Generic Tests

These are the most basic of test macros, that can be used to check for complex
properties, that the more specialised macros cannot. These macros take exactly
one argument, that is tested for the value indicated by the macro's name.

* `(pass-if-true EXPRESSION)`
* `(pass-if-false EXPRESSION)`


## Equality Tests

The macros listed in this section provide specialised tests for Scheme's
generic equality predicates (*eq?*, *eqv?* and *equal?*). Each predicate has a
positive and an inverted logic macro version. Each of these macros take exactly
two arguments upon which the test indicated by the macro's name is performed.

* `(pass-if-eq? EXPRESSION EXPRESSION)`
* `(pass-if-not-eq? EXPRESSION EXPRESSION)`
* `(pass-if-eqv? EXPRESSION EXPRESSION)`
* `(pass-if-not-eqv? EXPRESSION EXPRESSION)`
* `(pass-if-equal? EXPRESSION EXPRESSION)`
* `(pass-if-not-equal? EXPRESSION EXPRESSION)`


## Value specific tests

The macros listed in this section provide specialised tests for some of
Scheme's value types (namely strings and numeric values). Each predicate has a
positive and an inverted logic macro version. Each of these macros take exactly
two arguments upon which the test indicated by the macro's name is performed.

These macros test for equality of numeric values:

* `(pass-if-= NUMBER NUMBER)`
* `(pass-if-not-= NUMBER NUMBER)`

* `(pass-if-~= NUMBER NUMBER EPS)`
* `(pass-if-not-~= NUMBER NUMBER EPS)`

The latter two incantations implement approximate equality testing, by allowing
the user to provide a measure of the approximation via the *EPS* parameter.

These perform a test for absolute equality of two given strings:

* `(pass-if-string=? STRING STRING)`
* `(pass-if-not-string=? STRING STRING)`

The following two macros perform a test for case-insensitive equality of two
given strings:

* `(pass-if-string-ci=? STRING STRING)`
* `(pass-if-not-string-ci=? STRING STRING)`

Finally, these macros perform the test of matching a string to a regular
expression. They assume the first argument to be a string containing the
regular expression to be matched against the string in the second argument.

* `(pass-if-re-match PATTERN STRING)`
* `(pass-if-not-re-match PATTERN STRING)`


## Exception Handling Tests

The set of macros listed in this section can be used test if a given expression
causes an exception to be thrown or not. The first two macros listed expect
exactly one argument: The expression to be evaluated. The third macro expects
two arguments: First the type of exception that is expected to be thrown and
second the expression to be evaluated.

* `(pass-if-any-exception EXPRESSION)`
* `(pass-if-no-exception EXPRESSION)`
* `(pass-if-exception SYMBOL EXPRESSION)`


## Custom Tests

The framework provides a macro ‘*define-tap-test*’ that can be used to define
custum test macros. Macros defined in this way exhibit all features, that the
core macros described above offer, because those are indeed defined in terms of
‘*define-tap-test*’ as well.

* `(define-tap-test TEMPLATE EXPRESSION)`


# Utilities

# Other API

## The Plan

With TAP the output of a test script announces the number of tests that are
expected to run. This serves as a safeguard against test scripts that may die
unexpectedly. Since the number of tests a script runs is usually deterministic,
this requirement can be easily fulfilled. With scripts that run a
non-deterministic number of tests, it is possible to to produce a plan-like
line as the last line of a scripts output that shows the number of tests that
were run.


### Deterministic plans

The ‘*plan*’ procedure produces a plan line. It requires one integer value as
its sole argument and produces TAP compliant output.

* `(plan INTEGER)`

This should be among the first steps in every test bundle (usually it is indeed
the first action taken), before any tests are performed.


### Non-deterministic plans

In case the number of tests in a script is not known, the ‘*no-plan*’ procedure
may be called. It takes no arguments and causes a bundle to produce a plan-like
line at the end of its output. This procedure should be called in the same
place the ‘*plan*’ procedure would normally be used.

* `(no-plan)`


## Bundles

Bundles may be used to group a number of tests into a logical group. The
*with-test-bundle* macro introduces such bundles.

* `(with-test-bundle HIERARCHY expression(s) ...)`

It is possible to have more than one bundle per file, however the default
‘*prove*’ TAP harness from the Perl programming language expects only one plan
per test script, which mean that it cannot be used without modification if you
plan to use multiple bundles in a script.

The framework provides a wrapper for ‘*with-test-bundle*’ that deduces the
hierarchy argument by looking that the test-scripts name in the file system.

* `(with-fs-test-bundle expression(s) ...)`

See the “Configuration” section below for details about how to control how the
file name of the test-script is turned into a hierarchy list.


## Diagnostics

TODO


## Configuration

TODO


# EXAMPLES

## Test complex properties with generic macros

~~~~~~~{.scheme}
(define-test "The *foo* variable has valid type"
  (pass-if-true (or (boolean? *foo*)
                    (integer? *foo*))))
~~~~~~~

## Perform a regular expression test

~~~~~~~{.scheme}
(define-test "test: re-match"
  (pass-if-re-match "^Does.*match" "Does this match?"))
~~~~~~~

## Define and use a custom test macro

If tests for string-ness of a value a needed often:

~~~~~~~{.scheme}
(define-tap-test (pass-if-string? datum)
  (string? datum))

(define foo "bar")

(with-test-bundle (demo custom-tests)
  (define-test "Check if foo is a string"
    (pass-if-string? foo)))
~~~~~~~

Or to rehash the “complex” example from earlier:

~~~~~~~{.scheme}
(define-tap-test (pass-if-bool/int? datum)
  (or (boolean? datum) (string? datum)))

(define-test "The *foo* variable has valid type"
  (pass-if-bool/int? *foo*))
~~~~~~~


# SEE ALSO

*TAP::Parser(3)*, *prove(1)*


# COPYRIGHT

Copyright 2012-2016 Frank Terbeck <ft@bewatermyfriend.org>, All rights reserved.

Redistribution  and   use  in  source   and  binary  forms,  with   or  without
modification, are permitted provided that the following conditions are met:

  1. Redistributions  of source  code must retain  the above  copyright notice,
     this list of conditions and the following disclaimer.

  2. Redistributions in binary form  must reproduce the above copyright notice,
     this list of conditions and  the following disclaimer in the documentation
     and/or other materials provided with the distribution.

 THIS  SOFTWARE IS  PROVIDED "AS  IS" AND  ANY EXPRESS  OR IMPLIED  WARRANTIES,
 INCLUDING, BUT NOT  LIMITED TO, THE IMPLIED WARRANTIES  OF MERCHANTABILITY AND
 FITNESS FOR A PARTICULAR PURPOSE ARE  DISCLAIMED. IN NO EVENT SHALL THE AUTHOR
 OR CONTRIBUTORS OF THE PROJECT BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 SPECIAL, EXEMPLARY, OR  CONSEQUENTIAL DAMAGES (INCLUDING, BUT  NOT LIMITED TO,
 PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 BUSINESS INTERRUPTION) HOWEVER CAUSED AND  ON ANY THEORY OF LIABILITY, WHETHER
 IN CONTRACT,  STRICT LIABILITY,  OR TORT  (INCLUDING NEGLIGENCE  OR OTHERWISE)
 ARISING IN  ANY WAY OUT OF  THE USE OF THIS  SOFTWARE, EVEN IF ADVISED  OF THE
 POSSIBILITY OF SUCH DAMAGE.
