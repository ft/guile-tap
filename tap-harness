#!guile -s
-*- scheme -*-
!#

(use-modules (ice-9 getopt-long)
             (test tap-harness))

(define *name*    'tap-harness)
(define *version* '((major . 0)
                    (minor . 0)
                    (patch . 1)))

(define (pp-version v)
  (string-join (map (compose number->string cdr) v) "."))

(define option-spec
  '((debug   (single-char #\D) (value #f))
    (help    (single-char #\h) (value #f))
    (verbose (single-char #\v) (value #f))
    (version (single-char #\V) (value #f))))

(define opts (getopt-long (command-line) option-spec))

(define (opt o)
  (option-ref opts o #f))

(when (opt 'help)
  (newline)
  (format #t " Usage:   tap-harness [OPTION(s)]~%~%")
  (format #t "  --help, -h      Print this help text.~%")
  (format #t "  --version, -V   Print version information about the program.~%")
  (format #t "  --debug, -D     Enable debugging output in the program.~%")
  (format #t "  --verbose, -v   Enable verbose harness operation.~%")
  (newline)
  (quit 0))

(when (opt 'version)
  (format #t "~a version ~a~%" *name* (pp-version *version*))
  (quit 0))

(define harness-callback
  (if (opt 'verbose)
      (make-harness-callback #:test echo-input
                             #:plan echo-input
                             #:diagnostic echo-input
                             #:version echo-input
                             #:bailout echo-input)
      (make-harness-callback #:bailout echo-input)))

(harness-analyse ((if (opt 'debug)
                      pp-harness-state
                      identity) (harness harness-callback))
                 #:pre-summary (lambda ()
                                 (when (opt 'verbose)
                                   (newline))))
